// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package surveys

import (
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type PersonT string

const (
	PersonTPatient  PersonT = "patient"
	PersonTCareteam PersonT = "care team"
)

func (e *PersonT) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PersonT(s)
	case string:
		*e = PersonT(s)
	default:
		return fmt.Errorf("unsupported scan type for PersonT: %T", src)
	}
	return nil
}

type NullPersonT struct {
	PersonT PersonT
	Valid   bool // Valid is true if PersonT is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPersonT) Scan(value interface{}) error {
	if value == nil {
		ns.PersonT, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PersonT.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPersonT) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PersonT), nil
}

type Person struct {
	ID         uuid.UUID
	PersonType PersonT
	Fname      string
	Lname      string
	CreatedAt  pgtype.Timestamp
	UpdatedAt  pgtype.Timestamp
}

type SurveyAttribute struct {
	ID             uuid.UUID
	SurveyID       uuid.UUID
	DisplayNm      string
	Description    pgtype.Text
	Dtype          string
	OrderExecution int32
	CreatedAt      pgtype.Timestamp
	UpdatedAt      pgtype.Timestamp
}

type SurveyValue struct {
	ID                uuid.UUID
	SubmittedBy       uuid.UUID
	SurveyID          uuid.UUID
	SurveyAttributeID uuid.UUID
	Input             []byte
	CreatedAt         pgtype.Timestamp
}

type SurveysEav struct {
	ID          uuid.UUID
	DisplayNm   string
	Description string
	CreatedAt   pgtype.Timestamp
	UpdatedAt   pgtype.Timestamp
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package assessments

import (
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type Assessment string

const (
	AssessmentVitalsigns Assessment = "vital signs"
)

func (e *Assessment) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Assessment(s)
	case string:
		*e = Assessment(s)
	default:
		return fmt.Errorf("unsupported scan type for Assessment: %T", src)
	}
	return nil
}

type NullAssessment struct {
	Assessment Assessment
	Valid      bool // Valid is true if Assessment is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAssessment) Scan(value interface{}) error {
	if value == nil {
		ns.Assessment, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Assessment.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAssessment) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Assessment), nil
}

type Attribute string

const (
	AttributeTemperature Attribute = "temperature"
)

func (e *Attribute) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Attribute(s)
	case string:
		*e = Attribute(s)
	default:
		return fmt.Errorf("unsupported scan type for Attribute: %T", src)
	}
	return nil
}

type NullAttribute struct {
	Attribute Attribute
	Valid     bool // Valid is true if Attribute is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAttribute) Scan(value interface{}) error {
	if value == nil {
		ns.Attribute, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Attribute.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAttribute) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Attribute), nil
}

type AssessmentAttribute struct {
	ID           uuid.UUID
	AssessmentID uuid.UUID
	DisplayNm    string
	Attribute    Attribute
	Dtype        string
	CreatedAt    pgtype.Timestamp
	UpdatedAt    pgtype.Timestamp
}

type AssessmentValue struct {
	ID                    uuid.UUID
	PatientID             uuid.UUID
	AssessmentID          uuid.UUID
	AssessmentAttributeID uuid.UUID
	Input                 []byte
	CreatedAt             pgtype.Timestamp
}

type AssessmentsEav struct {
	ID         uuid.UUID
	Assessment Assessment
	DisplayNm  string
	CreatedAt  pgtype.Timestamp
	UpdatedAt  pgtype.Timestamp
}

type Patient struct {
	ID        uuid.UUID
	Fname     string
	Lname     string
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
}

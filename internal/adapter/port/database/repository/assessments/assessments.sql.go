// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: assessments.sql

package assessments

import (
	"context"

	"github.com/google/uuid"
)

const insertAssessmentValue = `-- name: InsertAssessmentValue :one
INSERT INTO assessment_values (
    patient_id,
    assessment_id,
    assessment_attribute_id,
    input
) VALUES (
    $1, $2, $3, $4
)
RETURNING id, patient_id, assessment_id, assessment_attribute_id, input, created_at
`

type InsertAssessmentValueParams struct {
	PatientID             uuid.UUID
	AssessmentID          uuid.UUID
	AssessmentAttributeID uuid.UUID
	Input                 []byte
}

// InsertAssessmentValue create new assessment value
func (q *Queries) InsertAssessmentValue(ctx context.Context, arg InsertAssessmentValueParams) (AssessmentValue, error) {
	row := q.db.QueryRow(ctx, insertAssessmentValue,
		arg.PatientID,
		arg.AssessmentID,
		arg.AssessmentAttributeID,
		arg.Input,
	)
	var i AssessmentValue
	err := row.Scan(
		&i.ID,
		&i.PatientID,
		&i.AssessmentID,
		&i.AssessmentAttributeID,
		&i.Input,
		&i.CreatedAt,
	)
	return i, err
}

const readAssessmentAttribute = `-- name: ReadAssessmentAttribute :one
SELECT
    id, assessment_id, display_nm, attribute, dtype, created_at, updated_at
FROM
    assessment_attributes
WHERE
    id = $1
    AND assessment_id = $2
`

type ReadAssessmentAttributeParams struct {
	ID           uuid.UUID
	AssessmentID uuid.UUID
}

// ReadAssessmentAttribute by id
func (q *Queries) ReadAssessmentAttribute(ctx context.Context, arg ReadAssessmentAttributeParams) (AssessmentAttribute, error) {
	row := q.db.QueryRow(ctx, readAssessmentAttribute, arg.ID, arg.AssessmentID)
	var i AssessmentAttribute
	err := row.Scan(
		&i.ID,
		&i.AssessmentID,
		&i.DisplayNm,
		&i.Attribute,
		&i.Dtype,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
